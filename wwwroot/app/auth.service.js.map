{"version":3,"sources":["auth.service.ts"],"names":["AuthService","http","this","authKey","prototype","login","username","password","_this","data","client_id","grant_type","scope","post","toUrlEncodedString","http_1","RequestOptions","headers","Headers","Content-Type","map","response","auth","json","console","log","setAuth","logout","body","key","length","encodeURIComponent","localStorage","setItem","JSON","stringify","removeItem","getAuth","value","getItem","parse","isLoggedIn","get","add","user","update","put","__decorate","core_1","Injectable","Http"],"mappings":"62BAcI,SAAAA,YAAoBC,MAAAC,KAAAD,KAAAA,KAFpBC,KAAAC,QAAU,OA8Gd,OA1GIH,YAAAI,UAAAC,MAAA,SAAMC,SAAkBC,UAAxB,IAAAC,MAAAN,KAGQO,MACAH,SAAUA,SACVC,SAAUA,SACVG,UAAW,gBAEXC,WAAY,WAEZC,MAAO,gCAGX,OAAOV,KAAKD,KAAKY,KAZP,oBAcNX,KAAKY,mBAAmBL,MACxB,IAAIM,OAAAC,gBACAC,QAAS,IAAIF,OAAAG,SACTC,eAAgB,yCAI3BC,IAAI,SAAAC,UACD,IAAIC,KAAOD,SAASE,OAIpB,OAHAC,QAAQC,IAAI,sDACZD,QAAQC,IAAIH,MACZd,MAAKkB,QAAQJ,MACNA,QAIftB,YAAAI,UAAAuB,OAAA,WAEI,OADAzB,KAAKwB,QAAQ,OACN,GAKX1B,YAAAI,UAAAU,mBAAA,SAAmBL,MACf,IAAImB,KAAO,GACX,IAAI,IAAIC,OAAOpB,KACRmB,KAAKE,SACJF,MAAQ,KAEZA,MAAQC,IAAM,IACdD,MAAQG,mBAAmBtB,KAAKoB,MAEpC,OAAOD,MAIX5B,YAAAI,UAAAsB,QAAA,SAAQJ,MAQJ,OANGA,KACCU,aAAaC,QAAQ/B,KAAKC,QAAS+B,KAAKC,UAAUb,OAGlDU,aAAaI,WAAWlC,KAAKC,UAE1B,GAIXH,YAAAI,UAAAiC,QAAA,WACI,IAAIC,MAAQN,aAAaO,QAAQrC,KAAKC,SACtC,OAAImC,MACOJ,KAAKM,MAAMF,OAGX,MAKftC,YAAAI,UAAAqC,WAAA,WACI,OAA6C,MAAtCT,aAAaO,QAAQrC,KAAKC,UAGrCH,YAAAI,UAAAsC,IAAA,WACI,OAAOxC,KAAKD,KAAKyC,IAAI,gBAChBtB,IAAI,SAAAC,UAAY,OAAAA,SAASE,UAGlCvB,YAAAI,UAAAuC,IAAA,SAAIC,MACA,OAAO1C,KAAKD,KAAKY,KACb,eACAqB,KAAKC,UAAUS,MACf,IAAI7B,OAAAC,gBACAC,QAAS,IAAIF,OAAAG,SACTC,eAAgB,wBAG1BC,IAAI,SAAAC,UAAY,OAAAA,SAASE,UAG/BvB,YAAAI,UAAAyC,OAAA,SAAOD,MACH,OAAO1C,KAAKD,KAAK6C,IACb,eACAZ,KAAKC,UAAUS,MACf,IAAI7B,OAAAC,gBACAC,QAAS,IAAIF,OAAAG,SACTC,eAAgB,wBAG1BC,IAAI,SAAAC,UAAY,OAAAA,SAASE,QA7GtBvB,YAAW+C,YAHvBC,OAAAC,6CAM6BlC,OAAAmC,QAHjBlD","file":"auth.service.js","sourcesContent":["//Imports\r\nimport { Injectable, EventEmitter } from \"@angular/core\";\r\nimport { Http, RequestOptions, Headers } from \"@angular/http\";\r\nimport { json } from \"d3\";\r\n\r\nimport { User } from \"../app/user/user\"; \r\n\r\n//Decorators\r\n@Injectable()\r\n\r\n//Exports\r\nexport class AuthService {\r\n    authKey = \"auth\";\r\n    \r\n    constructor(private http: Http) { }\r\n\r\n    login(username: string, password: string): any{\r\n        var url = \"api/connect/token\"; //Toke provider's LoginPath\r\n        // var url = \"api/accounts\";\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"MBApplication\",\r\n            //required when signing up with username/password\r\n            grant_type: \"password\",\r\n            //space-separated list of scopes for which the token is issued\r\n            scope: \"offline_access profile email\"\r\n        };\r\n        \r\n        return this.http.post(\r\n            url, \r\n            this.toUrlEncodedString(data),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                })\r\n            })\r\n        )\r\n        .map(response => {\r\n            var auth = response.json();\r\n            console.log(\"The following auth JSON object has been received: \");\r\n            console.log(auth);\r\n            this.setAuth(auth);\r\n            return auth;\r\n        });\r\n    }\r\n\r\n    logout(): boolean{\r\n        this.setAuth(null);\r\n        return false;\r\n    }\r\n\r\n\r\n    //Converts a Json object to urlencoded format\r\n    toUrlEncodedString(data: any) {\r\n        var body = \"\";\r\n        for(var key in data){\r\n            if(body.length){\r\n                body += \"&\";\r\n            }\r\n            body += key + \"=\";\r\n            body += encodeURIComponent(data[key]);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    //Persist auth into localStorage or removes it if a NULL arguement is given\r\n    setAuth(auth: any): boolean {\r\n        \r\n        if(auth){\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        }\r\n        else{\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //Retrieves the auth JSON objet (or NULL if none)    \r\n    getAuth(): any{\r\n        var value = localStorage.getItem(this.authKey);\r\n        if (value){\r\n            return JSON.parse(value);\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //Returns TRUE if the user is logged in, FALSE otherwise\r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n\r\n    get(){\r\n        return this.http.get(\"api/accounts\")\r\n            .map(response => response.json());\r\n    }\r\n\r\n    add(user: User){\r\n        return this.http.post(\r\n            \"api/Accounts\",\r\n            JSON.stringify(user),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            })\r\n        ).map(response => response.json());\r\n    }\r\n\r\n    update(user: User){\r\n        return this.http.put(\r\n            \"api/accounts\",\r\n            JSON.stringify(user),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            })\r\n        ).map(response => response.json)\r\n    }\r\n}"]}