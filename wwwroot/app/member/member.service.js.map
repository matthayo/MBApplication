{"version":3,"sources":["member/member.service.ts"],"names":["MemberService","http","this","baseUrl","prototype","get","num","url","map","respose","json","catch","handleError","getAllMembers","response","getByName","name","add","member","post","JSON","stringify","getRequestOptions","update","Id","put","delete","id","http_1","RequestOptions","headers","Headers","Content-Type","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","Http"],"mappings":"s8BAgBI,SAAAA,cAAoBC,MAAAC,KAAAD,KAAAA,KAFpBC,KAAAC,QAAU,eA8Ed,OAvEIH,cAAAI,UAAAC,IAAA,SAAIC,KACA,IAAIC,IAAML,KAAKC,QAAU,OAIzB,OAFU,MAAPG,MAAaC,KAAOD,KAEhBJ,KAAKD,KAAKI,IAAIE,KACRC,IAAI,SAAAC,SAAW,OAAAA,QAAQC,SACvBC,MAAMT,KAAKU,cAI5BZ,cAAAI,UAAAS,cAAA,WACI,IAAIN,IAAML,KAAKC,QAAU,iBAEzB,OAAOD,KAAKD,KAAKI,IAAIE,KACZC,IAAI,SAAAM,UAAY,OAAAA,SAASJ,SACzBC,MAAMT,KAAKU,cAIxBZ,cAAAI,UAAAW,UAAA,SAAUC,MACN,IAAIT,IAAML,KAAKC,QAAU,iBAAmBa,KAE5C,OAAOd,KAAKD,KAAKI,IAAIE,KACZC,IAAI,SAAAM,UAAY,OAAAA,SAASJ,SACzBC,MAAMT,KAAKU,cAIxBZ,cAAAI,UAAAa,IAAA,SAAIC,QACA,IAAIX,IAAML,KAAKC,QAEf,OAAOD,KAAKD,KAAKkB,KAAKZ,IAAKa,KAAKC,UAAUH,QAAShB,KAAKoB,qBACnDd,IAAI,SAAAM,UAAY,OAAAA,SAASJ,SACzBC,MAAMT,KAAKU,cAKpBZ,cAAAI,UAAAmB,OAAA,SAAOL,QACH,IAAIX,IAAML,KAAKC,QAAUe,OAAOM,GAEhC,OAAOtB,KAAKD,KAAKwB,IAAIlB,IAAKa,KAAKC,UAAUH,QAAShB,KAAKoB,qBAClDd,IAAI,SAAAM,UAAY,OAAAA,SAASJ,SACzBC,MAAMT,KAAKU,cAKpBZ,cAAAI,UAAAsB,OAAA,SAAOC,IACH,IAAIpB,IAAML,KAAKC,QAAUwB,GAEzB,OAAOzB,KAAKD,KAAKyB,OAAOnB,KACfI,MAAMT,KAAKU,cAMhBZ,cAAAI,UAAAkB,kBAAR,WACI,OAAO,IAAIM,OAAAC,gBACPC,QAAS,IAAIF,OAAAG,SACTC,eAAgB,wBAKpBhC,cAAAI,UAAAQ,YAAR,SAAoBqB,OAEhB,OADAC,QAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMvB,OAAOuB,OAAS,iBA/EzCjC,cAAasC,YAHzBC,OAAAC,6CAQ6BZ,OAAAa,QALjBzC","file":"member.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response, RequestOptions, Headers } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\n\r\nimport { AuthService } from \"../auth.service\";\r\nimport { Member } from \"./member\";\r\n\r\n//Decorator\r\n@Injectable()\r\n\r\n//Export\r\nexport class MemberService {\r\n    \r\n    //Web API URL\r\n    baseUrl = \"api/members/\"; \r\n   \r\n    constructor(private http: Http) {\r\n        \r\n    }\r\n\r\n    // GET call for api/members/get/{id}\r\n    get(num?: number){\r\n        var url = this.baseUrl + \"Get/\"\r\n\r\n        if(num != null) url += num;\r\n\r\n        return this.http.get(url)\r\n                    .map(respose => respose.json())\r\n                    .catch(this.handleError);\r\n    }\r\n\r\n    //API call to GetAllMembers \"api/members/getallmembers\"\r\n    getAllMembers(){\r\n        var url = this.baseUrl + \"GetAllMembers/\"\r\n\r\n        return this.http.get(url)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // API call to \"Find by Name\" /api/members/GetByLastName/{name}\r\n    getByName(name: string){\r\n        var url = this.baseUrl + \"GetByLastName/\" + name;\r\n\r\n        return this.http.get(url)\r\n                .map(response => response.json())\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // POST call for /api/members\r\n    add(member: Member){\r\n        var url = this.baseUrl;\r\n\r\n        return this.http.post(url, JSON.stringify(member), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n\r\n    // PUT call for /api/members/{id}\r\n    update(member: Member){\r\n        var url = this.baseUrl + member.Id;\r\n\r\n        return this.http.put(url, JSON.stringify(member), this.getRequestOptions())\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n\r\n    // DELETE call for /api/members/{id}\r\n    delete(id: number){\r\n        var url = this.baseUrl + id;\r\n\r\n        return this.http.delete(url)\r\n                .catch(this.handleError);\r\n    }\r\n\r\n    // Helper Methods\r\n\r\n    //returns a viable RequestOptions object to handle Json requests\r\n    private getRequestOptions() {\r\n        return new RequestOptions({\r\n            headers: new Headers({\r\n                \"Content-Type\": \"application/json\"\r\n            })\r\n        })\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n}"]}