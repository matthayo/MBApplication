{"version":3,"sources":["nav/nav-breadcrumb.component.ts"],"names":["NavBreadcrumbComponent","activatedRoute","router","this","breadcrumbs","prototype","ngOnInit","_this","events","filter","event","router_1","NavigationEnd","subscribe","root","getBreadcrumbs","url","children","length","_i","children_1","child","outlet","PRIMARY_OUTLET","snapshot","data","hasOwnProperty","map","segment","path","join","breadcrumb","label","params","push","__decorate","core_1","Component","selector","templateUrl","ActivatedRoute","Router"],"mappings":"u7BA2BI,SAAAA,uBACYC,eACAC,QADAC,KAAAF,eAAAA,eACAE,KAAAD,OAAAA,OAERC,KAAKC,eAuEb,OA9DIJ,uBAAAK,UAAAC,SAAA,WAAA,IAAAC,MAAAJ,KAIIA,KAAKD,OAAOM,OAAOC,OAAO,SAAAC,OAAS,OAAAA,iBAAiBC,SAAAC,gBAAeC,UAAU,SAAAH,OAEzE,IAAII,KAAuBP,MAAKN,eAAea,KAC/CP,MAAKH,YAAcG,MAAKQ,eAAeD,SAavCd,uBAAAK,UAAAU,eAAR,SAAuBd,eAAgCe,IAAkBZ,kBAAlB,IAAAY,MAAAA,IAAA,SAAkB,IAAAZ,cAAAA,gBACrE,IAGIa,SAA6BhB,eAAegB,SAGhD,GAAwB,IAApBA,SAASC,OACT,OAAOd,YAIX,IAAkB,IAAAe,GAAA,EAAAC,WAAAH,SAAAE,GAAAC,WAAAF,OAAAC,KAAQ,CAArB,IAAIE,MAAKD,WAAAD,IAEV,GAAIE,MAAMC,SAAWX,SAAAY,eAArB,CAKA,IAAKF,MAAMG,SAASC,KAAKC,eAlBS,cAmB9B,OAAOvB,KAAKY,eAAeM,MAAOL,IAAKZ,aAO3CY,KAAO,IAHgBK,MAAMG,SAASR,IAAIW,IAAI,SAAAC,SAAW,OAAAA,QAAQC,OAAMC,KAAK,KAM5E,IAAIC,YACAC,MAAOX,MAAMG,SAASC,KAA0B,WAChDQ,OAAQZ,MAAMG,SAASS,OACvBjB,IAAKA,KAKT,OAHAZ,YAAY8B,KAAKH,YAGV5B,KAAKY,eAAeM,MAAOL,IAAKZ,gBA/EtCJ,uBAAsBmC,YANlCC,OAAAC,WACGC,SAAU,gBACVC,YAAa,0EAae5B,SAAA6B,eACR7B,SAAA8B,UAVXzC","file":"nav-breadcrumb.component.js","sourcesContent":["//Imports\r\nimport { Component, OnInit } from \"@angular/core\";\r\nimport { Router, ActivatedRoute, NavigationEnd, Params, PRIMARY_OUTLET } from \"@angular/router\";\r\nimport \"rxjs/add/operator/filter\";\r\n\r\n//Interface \"struct\"\r\ninterface IBreadcrumb {\r\n    label: string;\r\n    params: Params;\r\n    url: string;\r\n}\r\n\r\n//Decorator\r\n@Component({\r\n    selector: \"navbreadcrumb\",\r\n    templateUrl: \"app/nav/nav-breadcrumb.component.html\"\r\n})\r\n\r\n//Export\r\nexport class NavBreadcrumbComponent implements OnInit {\r\n\r\n    public breadcrumbs: IBreadcrumb[];\r\n\r\n    /**\r\n     * @class DetailComponent\r\n     * @constructor\r\n     */\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) {\r\n        this.breadcrumbs = [];\r\n    }\r\n\r\n    /**\r\n     * Let's go!\r\n     *\r\n     * @class DetailComponent\r\n     * @method ngOnInit\r\n     */\r\n    ngOnInit() {\r\n        const ROUTE_DATA_BREADCRUMB: string = \"breadcrumb\";\r\n\r\n        //subscribe to the NavigationEnd event\r\n        this.router.events.filter(event => event instanceof NavigationEnd).subscribe(event => {\r\n            //set breadcrumbs\r\n            let root: ActivatedRoute = this.activatedRoute.root;\r\n            this.breadcrumbs = this.getBreadcrumbs(root);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns array of IBreadcrumb objects that represent the breadcrumb\r\n     *\r\n     * @class NavBreadcrumbComponent\r\n     * @method getBreadcrumbs\r\n     * @param {ActivateRoute} activatedRoute\r\n     * @param {string} url\r\n     * @param {IBreadcrumb[]} breadcrumbs\r\n     */\r\n    private getBreadcrumbs(activatedRoute: ActivatedRoute, url: string = \"\", breadcrumbs: IBreadcrumb[] = []): IBreadcrumb[] {\r\n        const ROUTE_DATA_BREADCRUMB: string = \"breadcrumb\";\r\n\r\n        //get the child routes\r\n        let children: ActivatedRoute[] = activatedRoute.children;\r\n\r\n        //return if there are no more children\r\n        if (children.length === 0) {\r\n            return breadcrumbs;\r\n        }\r\n\r\n        //iterate over each children\r\n        for (let child of children) {\r\n            //verify primary route\r\n            if (child.outlet !== PRIMARY_OUTLET) {\r\n                continue;\r\n            }\r\n\r\n            //verify the custom data property \"breadcrumb\" is specified on the route\r\n            if (!child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {\r\n                return this.getBreadcrumbs(child, url, breadcrumbs);\r\n            }\r\n\r\n            //get the route's URL segment\r\n            let routeURL: string = child.snapshot.url.map(segment => segment.path).join(\"/\");\r\n\r\n            //append route URL to URL\r\n            url += `/${routeURL}`;\r\n\r\n            //add breadcrumb\r\n            let breadcrumb: IBreadcrumb = {\r\n                label: child.snapshot.data[ROUTE_DATA_BREADCRUMB],\r\n                params: child.snapshot.params,\r\n                url: url\r\n            };\r\n            breadcrumbs.push(breadcrumb);\r\n\r\n            //recursive\r\n            return this.getBreadcrumbs(child, url, breadcrumbs);\r\n        }\r\n    }\r\n\r\n}"]}